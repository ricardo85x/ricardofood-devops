pipeline {
    agent any
    
    tools {
        maven 'maven3'
        jdk 'jdk17'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    

    stages {
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/ricardo85x/ricardofood-payment-microservice'
            }
        }
        
        stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=ricardofood_payment -Dsonar.projectName=ricardofood_payment -Dsonar.java.binaries=."
                }
            }
        }
        
        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '', nvdCredentialsId: 'nvd-nist-key', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn package'
            }
        }
        
        stage('Deploy To Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'global-maven', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        }
        
        stage('Build & Tag Docker Image') {
            steps {
                script {
                    def version = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()

                    echo "Building version: ${version}"

                    sh "docker build --build-arg JAR_FILE=payment-${version}.jar -t ricardo85x/ricardofood-payment:${version} -f docker/Dockerfile ."
                    sh "docker tag ricardo85x/ricardofood-payment:${version} ricardo85x/ricardofood-payment:latest"
                    
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh "trivy image ricardo85x/ricardofood-payment:latest > trivy-report.txt "
                
            }
        }

        stage('Push The Docker Image') {
            steps {
                script {

                    def version = sh(script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true).trim()

                    withDockerRegistry(credentialsId: 'docker-hub-cred') {
                        sh "docker push ricardo85x/ricardofood-payment:${version}"
                        sh "docker push ricardo85x/ricardofood-payment:latest"
                    }   
                }
                 
            }
        }
        
    }
}
